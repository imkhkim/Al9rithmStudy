import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int[] p;

	static int find(int node) {
		if (p[node] < 0)
			return node; // p 배열을 -1로 초기화했고 루트 노드는 집합의 크기를 음수의 절댓값 표현하므로 루트 노드이면 자신을 반환
		return p[node] = find(p[node]); // 경로 압축
	} // find

	static void union(int u, int v) {
		u = find(u); // u의 부모 노드를 찾음
		v = find(v); // v의 부모 노드를 찾음
		
		if (u == v) return; // 같은 집합이면 리턴
		
		// 항상 큰 집합 쪽으로 합치기 위해 집합의 크기를 관리 (안 했을 때 보다 시간 복잡도 줄어듦)
		if (p[u] <= p[v]) { // u 집합의 크기가 b 집합의 크기보다 크거나 같으면 
			p[u] += p[v]; // u에 v의 크기를 더하고 (집합의 크기를 음수의 절댓값으로 표현)
			p[v] = u; // u 밑에 v를 둔다
		} else {
			p[v] += p[u];
			p[u] = v;
		}
	} // union

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		p = new int[N + 1];
		Arrays.fill(p, -1); // 루트 노드를 -1로 초기화하고, 추후 루트 노드의 크기는 음수로 관리됨. 절댓값 취하면 양수 크기가 됨.

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			union(u, v);
		}
		
		int cnt = 0;
		for (int i = 1; i <= N; i++) {
			if (p[i] < 0) { // p[i]가 음수면 부모가 없는 루트 노트
				cnt++;
			}
		}
		System.out.println(cnt);
	} // main
}
